---
description: 
globs: 
alwaysApply: true
---
# Project Guidelines

## Project Structure
- `lib/` - Main application code
- `test/` - Test files
- `widgetbook/` - Widgetbook configuration and stories
- `ios/`, `android/`, `web/` - Platform-specific code

## Widgetbook Integration
- Use Widgetbook for component documentation and testing
- Place stories in appropriate directories under `widgetbook/`
- Follow the established pattern for story organization

## Testing Guidelines
- Write golden tests for UI components
- Place golden test files in `test/golden/`
- Follow the naming convention: `{component_name}_test.dart`

## Code Style
- Follow Flutter's official style guide
- Use `analysis_options.yaml` for linting rules
- Maintain consistent formatting using `dart format`

## Documentation
- Document public APIs and complex components
- Use clear and descriptive names for components and stories
- Keep README.md updated with project information

## Version Control
- Follow conventional commits
- Keep commits focused and atomic
- Use meaningful commit messages

## Dependencies
- Keep `pubspec.yaml` updated
- Document major dependency changes
- Follow semantic versioning for package updates

## Flutter Version Management (FVM)
- Use FVM to manage Flutter SDK versions
- Store Flutter version in `.fvm/flutter_sdk_version`
- Run `fvm flutter` commands instead of direct `flutter` commands
- Keep `.fvm` directory in version control
- Document Flutter version changes in commit messages
- Use FVM for CI/CD pipeline consistency 